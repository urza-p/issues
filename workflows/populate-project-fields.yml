name: Handle Bug Report

on:
  issues:
    types: [opened, edited]

jobs:
  handle-form:
    runs-on: ubuntu-latest
    steps:
      - name: Extract input values from issue body
        id: extract-values
        uses: actions/github-script@v4
        with:
          script: |
            const regexes = {
              loggedBy: /Logged By\n- \[x\] (.+)/,
              reportedOn: /Reported on\n- \[x\] (.+)/,
              epicFeatures: /Epic Features\n- \[x\] (.+)/,
              url: /URL, if applicable\n- \[x\] (.+)/,
              severity: /Severity\n- \[x\] (.+)/,
              environment: /Environment\n- \[x\] (.+)/
            };

            const issueBody = context.payload.issue.body;
            const inputValues = {};

            Object.keys(regexes).forEach((key) => {
              const regex = regexes[key];
              const matches = issueBody.match(regex);
              inputValues[key] = matches ? matches[1].trim() : '';
            });

            return inputValues;

      - name: Update project card custom fields
        uses: actions/github-script@v4
        with:
          script: |
            const projectNumber = 123; // Replace with your project number
            const customFieldNames = {
              loggedBy: 'Logged by',
              reportedOn: 'Reported on',
              epicFeatures: 'Epic Features',
              url: 'URL',
              severity: 'Severity',
              environment: 'Environment'
            };
            const inputValues = context.outputs.extractValues;

            const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
            const { data: projectCard } = await octokit.rest.projects.getCard({
              card_id: context.payload.issue.project_card.id
            });

            const { data: project } = await octokit.rest.projects.get({
              project_id: projectNumber
            });

            const { data: columns } = await octokit.rest.projects.listColumns({
              project_id: projectNumber
            });

            const column = columns.find((c) => c.name === projectCard.column_name);

            if (column) {
              const updatedNote = JSON.parse(projectCard.note);

              Object.keys(customFieldNames).forEach((key) => {
                const customFieldName = customFieldNames[key];
                const inputValue = inputValues[key];

                if (inputValue) {
                  updatedNote[customFieldName] = inputValue;
                } else {
                  delete updatedNote[customFieldName];
                }
              });

              await octokit.rest.projects.updateCard({
                card_id: context.payload.issue.project_card.id,
                project_id: projectNumber,
                column_id: column.id,
                note: JSON.stringify(updatedNote)
              });
            }
